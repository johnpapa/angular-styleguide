- trigger: ngfilter
  description: "Creates an Angular filter"
  scope: javascript
  text: |
        (function() {
            'use strict';

            angular
                .module('${1:moduleName}')
                .filter('${2:filterName}', ${2:filterName});

            function ${2:filterName}() {
                return ${2:filterName}Filter;

                ////////////////

                function ${2:filterName}Filter(${3:parameters}) {
                    return ${3:parameters};
                }
            }

        })();

- trigger: ngservice
  description: "Creates an Angular service"
  scope: javascript
  text: |
        (function() {
            'use strict';

            angular
                .module('${1:moduleName}')
                .service('${2:ServiceName}', ${2:ServiceName});

            ${2:ServiceName}.$inject = ['${3:dependency}'];

            /* @ngInject */
            function ${2:ServiceName}(${3:dependency}) {
                this.${4:functionName} = ${4:functionName};

                ////////////////

                function ${4:functionName}() {
                    ${5}
                }
            }

        })();

- trigger: ngapp
  description: "Creates an Angular module setter"
  scope: javascript
  text: |
        (function() {
            'use strict';

            angular
                .module('${1:moduleName}', [
                    '${2:dependency}'${3}
                ]);

        })();

- trigger: ngfactory
  description: "Creates an Angular factory"
  scope: javascript
  text: |
        (function() {
            'use strict';

            angular
                .module('${1:moduleName}')
                .factory('${2:factoryName}', ${2:factoryName});

            ${2:factoryName}.$inject = ['${3:dependency}'];

            /* @ngInject */
            function ${2:factoryName}(${3:dependency}) {
                var service = {
                    ${4:functionName}: ${4:functionName}
                };
                return service;

                ////////////////

                function ${4:functionName}() {
                    ${5}
                }
            }

        })();

- trigger: ngdirective
  description: "Creates an Angular directive"
  scope: javascript
  text: |
        (function() {
            'use strict';

            angular
                .module('${1:moduleName}')
                .directive('${2:directiveName}', ${2:directiveName});

            ${2:directiveName}.$inject = ['${3:dependency}'];

            /* @ngInject */
            function ${2:directiveName}(${3:dependency}) {
                var directive = {
                    bindToController: true,
                    controller: ${4:ControllerName},
                    controllerAs: '${5:vm}',
                    link: link,
                    restrict: 'A',
                    scope: {}
                };
                return directive;

                function link(scope, element, attrs) {
                    ${6}
                }
            }

            ${4:ControllerName}.$inject = ['${3:dependency}'];

            /* @ngInject */
            function ${4:ControllerName}(${3:dependency}) {
                ${7}
            }

        })();

- trigger: ngcontroller
  description: "Creates an Angular controller"
  scope: javascript
  text: |
        (function() {
            'use strict';

            angular
                .module('${1:moduleName}')
                .controller('${2:ControllerName}', ${2:ControllerName});

            ${2:ControllerName}.$inject = ['${3:dependency}'];

            /* @ngInject */
            function ${2:ControllerName}(${3:dependency}) {
                var vm = this;
                vm.title = '${2:ControllerName}';

                activate();

                ////////////////

                function activate() {
                    ${4}
                }
            }

        })();

- trigger: ngroute
  description: "Defines an Angular ngRoute 'when' definition"
  scope: javascript
  text: |
        .when('/${1:url}', {
            templateUrl: '${2:template}.html',
            controller: '${3:ControllerName}',
            controllerAs: '${4:vm}'
        })

- trigger: ngstate
  description: "Creates an Angular UI Router state definition"
  scope: javascript
  text: |
        .state('${1:state}', {
            url: '/${2:url}',
            templateUrl: '${3:template}.html',
            controller: '${4:ControllerName}',
            controllerAs: '${5:vm}'
        })

- trigger: ngmodule
  description: "Creates an Angular module getter"
  scope: javascript
  text: |
        angular
            .module('${1:moduleName}')
            ${2}
            
- trigger: ngconst
  description: "Creates an Angular constant"
  scope: javascript
  text: |
        .constant('${1:name}', ${2:value});

- trigger: ngvalue
  description: "Creates an Angular value"
  scope: javascript
  text: |
        .value('${1:name}', ${2:value});

- trigger: ngconfig
  description: "Defines a configuration phase function"
  scope: javascript
  text: |
        .config(${1:configName}Config)
        
        ${1:configName}Config.$inject = ['${2:dependency}'];

        /* @ngInject */
        function ${1:configName}Config(${2:dependency}) {
            ${3}
        }

- trigger: ngrun
  description: "Defines a run phase function"
  scope: javascript
  text: |
        .run(run${1:runName})

        run${1:runName}.$inject = ['${2:dependency}'];

        /* @ngInject */
        function run${1:runName}(${2:dependency}) {
            ${3}
        }

- trigger: ngtranslate
  description: "Creates an Angular $translate service"
  scope: javascript
  text: |
        $translate(['${1:key1}']).then(function(translations){
            ${2:value} = translations['${3:key1}'];
        });
